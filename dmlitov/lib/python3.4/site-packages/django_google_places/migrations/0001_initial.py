# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AddressComponent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('long_name', models.CharField(max_length=255)),
                ('short_name', models.CharField(max_length=255)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AddressComponentType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=191)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OpenPeriod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('open_day', models.SmallIntegerField(choices=[(0, b'Sunday'), (1, b'Monday'), (2, b'Tuesday'), (3, b'Wednesday'), (4, b'Thursday'), (5, b'Friday'), (6, b'Saturday')])),
                ('open_time', models.TimeField()),
                ('close_day', models.SmallIntegerField(choices=[(0, b'Sunday'), (1, b'Monday'), (2, b'Tuesday'), (3, b'Wednesday'), (4, b'Thursday'), (5, b'Friday'), (6, b'Saturday')])),
                ('close_time', models.TimeField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'The human-readable name for the place. For establishment results, this is usually the canonicalized business name.', max_length=255)),
                ('status', models.CharField(max_length=16, choices=[(b'sync', b'Sync'), (b'active', b'Active'), (b'inactive', b'Inactive'), (b'deleted', b'Deleted')])),
                ('website', models.URLField(help_text=b"The authoritative website for this Place, such as a business' homepage.", null=True, blank=True)),
                ('formatted_address', models.CharField(help_text=b'The human-readable address of this place - composed of one or more address components.', max_length=255)),
                ('vicinity', models.CharField(help_text=b'A simplified address for the Place, including the street name, street number, and locality, but not the province/state, postal code, or country.', max_length=255)),
                ('latitude', models.DecimalField(help_text=b"The places' geocoded latitude.", max_digits=9, decimal_places=6)),
                ('longitude', models.DecimalField(help_text=b"The places' geocoded longitude.", max_digits=9, decimal_places=6)),
                ('icon', models.URLField(help_text=b'URL of a suggested icon which may be displayed to the user when indicating this result on a map.', null=True, blank=True)),
                ('formatted_phone_number', models.CharField(help_text=b"The Place's phone number in its local format.", max_length=64, null=True, blank=True)),
                ('international_phone_number', models.CharField(help_text=b'Phone number in international format.', max_length=255, null=True, blank=True)),
                ('rating', models.DecimalField(help_text=b"Place's rating, from 1.0 to 5.0, based on user reviews.", null=True, max_digits=3, decimal_places=2, blank=True)),
                ('url', models.URLField(help_text=b'The official Google Place Page URL of this establishment.', null=True, blank=True)),
                ('utc_offset', models.IntegerField(help_text=b"The number of minutes this Place's current timezone is offset from UTC.")),
                ('reference_sha1', models.CharField(help_text=b"A sha1 of the reference - used for ensuring uniqueness of reference's.", max_length=40, unique=True, null=True, blank=True)),
                ('reference', models.TextField(help_text=b'A token that can be used to query the Google Places Details service in future.')),
                ('api_id', models.CharField(help_text=b'Unique stable identifier denoting this place.', unique=True, max_length=191)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, auto_now_add=True)),
                ('syncd', models.DateTimeField(help_text=b"When this place was last sync'd with Google's Places API.", auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('author_name', models.CharField(max_length=255)),
                ('author_url', models.CharField(max_length=255, null=True)),
                ('rating', models.DecimalField(max_digits=3, decimal_places=2)),
                ('text', models.TextField()),
                ('reviewed', models.DateTimeField()),
                ('place', models.ForeignKey(related_name='reviews', to='django_google_places.Place')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ReviewAspect',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('aspect_type', models.CharField(max_length=32, choices=[(b'appeal', b'Appeal'), (b'atmosphere', b'Atmosphere'), (b'decor', b'Decor'), (b'facilities', b'Facilities'), (b'food', b'Food'), (b'overall', b'Overall'), (b'quality', b'Quality'), (b'service', b'Service')])),
                ('rating', models.SmallIntegerField(help_text=b"Author's rating for this particular aspect, from 0 to 3.")),
                ('review', models.ForeignKey(related_name='aspects', to='django_google_places.Review')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='place',
            name='place_types',
            field=models.ManyToManyField(help_text=b'Feature types describing the given place.', related_name='places', to='django_google_places.PlaceType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='openperiod',
            name='place',
            field=models.ForeignKey(related_name='opening_periods', to='django_google_places.Place'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='addresscomponent',
            name='place',
            field=models.ForeignKey(related_name='address_components', to='django_google_places.Place'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='addresscomponent',
            name='types',
            field=models.ManyToManyField(related_name='address_components', to='django_google_places.AddressComponentType'),
            preserve_default=True,
        ),
    ]
